// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SUT23_Projekt___Avancerad_.NET.Data;

#nullable disable

namespace SUT23_Projekt___Avancerad_.NET.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240517152757_Initial Create")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClassLibary.Appointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentID"));

                    b.Property<DateTime?>("AppointmentEnd")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<double>("AppointmentLength")
                        .HasColumnType("float");

                    b.Property<string>("AppointmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AppointmentStart")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.HasKey("AppointmentID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppointmentID = 1,
                            AppointmentEnd = new DateTime(2024, 12, 8, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentLength = 0.5,
                            AppointmentName = "Snabb besök",
                            AppointmentStart = new DateTime(2024, 12, 8, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            CompanyID = 1,
                            CustomerID = 1
                        },
                        new
                        {
                            AppointmentID = 2,
                            AppointmentEnd = new DateTime(2024, 12, 2, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentLength = 1.0,
                            AppointmentName = "Massage",
                            AppointmentStart = new DateTime(2024, 12, 2, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyID = 1,
                            CustomerID = 2
                        },
                        new
                        {
                            AppointmentID = 3,
                            AppointmentEnd = new DateTime(2024, 12, 14, 5, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentLength = 2.0,
                            AppointmentName = "Rehab besök",
                            AppointmentStart = new DateTime(2024, 12, 14, 4, 0, 0, 0, DateTimeKind.Unspecified),
                            CompanyID = 1,
                            CustomerID = 2
                        });
                });

            modelBuilder.Entity("ClassLibary.ChangeHistory", b =>
                {
                    b.Property<int>("ChangeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChangeID"));

                    b.Property<int>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<string>("ChangeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NewAppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OldAppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WhenChanged")
                        .HasColumnType("datetime2");

                    b.HasKey("ChangeID");

                    b.ToTable("ChangeHistorys");

                    b.HasData(
                        new
                        {
                            ChangeID = 1,
                            AppointmentID = 0,
                            ChangeType = "Ombokning",
                            NewAppointmentTime = new DateTime(2024, 12, 15, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            OldAppointmentTime = new DateTime(2024, 12, 14, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            WhenChanged = new DateTime(2024, 12, 14, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ClassLibary.Company", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyID"));

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyID");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyID = 1,
                            CompanyName = "SportRehab"
                        });
                });

            modelBuilder.Entity("ClassLibary.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerID = 1,
                            CustomerAddress = "AborreGatan 5",
                            CustomerEmail = "Göran@qlok.se",
                            CustomerName = "Göran Nilsson",
                            CustomerPhone = "0701233214"
                        },
                        new
                        {
                            CustomerID = 2,
                            CustomerAddress = "Bruksvägen 45",
                            CustomerEmail = "Astrid@qlok.se",
                            CustomerName = "Astrid Johansson",
                            CustomerPhone = "0723516101"
                        },
                        new
                        {
                            CustomerID = 3,
                            CustomerAddress = "Hjälmvägen 1",
                            CustomerEmail = "Anna@qlok.se",
                            CustomerName = "Anna Jacobsson",
                            CustomerPhone = "0723112233"
                        },
                        new
                        {
                            CustomerID = 4,
                            CustomerAddress = "Hjälmvägen 1",
                            CustomerEmail = "Peo@qlok.se",
                            CustomerName = "Peo Jacobsson",
                            CustomerPhone = "0723459469"
                        });
                });

            modelBuilder.Entity("ClassLibary.Appointment", b =>
                {
                    b.HasOne("ClassLibary.Company", "Company")
                        .WithMany("Appointments")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibary.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ClassLibary.Company", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("ClassLibary.Customer", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
